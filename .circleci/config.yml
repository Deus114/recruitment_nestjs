  version: 2.1

  executors:
    docker-executor:
      docker:
        - image: cimg/node:20.3.1

  jobs:
    build:
      executor: docker-executor
      steps:
        - setup_remote_docker
        - checkout
        - run:
            name: Install dependencies
            command: npm ci
        - run:
            name: Build the application
            command: npm run build
        - run:
            name: Verify build output
            command: ls -lah dist
        - persist_to_workspace:
            root: .
            paths:
              - dist

    approve:
      executor: docker-executor
      docker:
        - image: cimg/base:stable
      steps:
        - run:
            name: "Manual Approval Required"
            command: echo "Approve the job to proceed with pushing the image"

    push:
      executor: docker-executor
      docker:
        - image: cimg/base:stable
      steps:
        - setup_remote_docker
        - checkout
        - attach_workspace:
            at: .
        - run:
            name: Verify workspace contents
            command: ls -lah dist
        - run:
            name: Build Docker Image
            command: |
              docker build \
                --tag $DOCKER_IMAGE_NAME:latest \
                --build-arg DIST_DIR=dist/main.js \
                .
        - run:
            name: Login to Docker Registry
            command: |
              echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - run:
            name: Push Docker Image
            command: |
              docker tag $DOCKER_IMAGE_NAME:latest $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:latest
              docker push $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:latest

    deploy:
      executor: docker-executor
      steps:
        - add_ssh_keys:
            fingerprints:
              - "SHA256:gebDA8+siZJWJqITTiusnDAOasS+jOnuPgq1jid0bAs"
        - run:
            name: Create .env file dynamically
            command: |
              echo "PORT=$PORT" > .env
              echo "MONGODB_URL=$MONGODB_URL" >> .env
              echo "JWT_ACCESS_TOKEN=$JWT_ACCESS_TOKEN" >> .env
              echo "JWT_ACCESS_EXPIRE=$JWT_ACCESS_EXPIRE" >> .env
              echo "JWT_REFRESH_TOKEN=$JWT_REFRESH_TOKEN" >> .env
              echo "JWT_REFRESH_EXPIRE=$JWT_REFRESH_EXPIRE" >> .env
              echo "SHOULD_INIT=$SHOULD_INIT" >> .env
              echo "EMAIL_HOST=$EMAIL_HOST" >> .env
              echo "EMAIL_PASSWORD=$EMAIL_PASSWORD" >> .env
              echo "EMAIL_PREVIEW=$EMAIL_PREVIEW" >> .env
              echo "EMAIL_USER=$EMAIL_USER" >> .env
              echo "INIT_PASSWORD=$INIT_PASSWORD" >> .env
        - run:
            name: Ensure directory exists on EC2
            command: |
              ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST "mkdir -p /home/ubuntu/$DOCKER_IMAGE_NAME"
        - run:
            name: Copy .env file to EC2
            command: |
              scp -o StrictHostKeyChecking=no .env ubuntu@$EC2_HOST:/home/ubuntu/$DOCKER_IMAGE_NAME/.env
        - run:
            name: Deploy to EC2
            command: |
              ssh -o StrictHostKeyChecking=no ubuntu@$EC2_HOST "bash -s" \<<EOF
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
              docker stop $DOCKER_CONTAINER_NAME || true
              docker rm $DOCKER_CONTAINER_NAME || true
              docker pull $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:latest
              docker run --env-file /home/ubuntu/$DOCKER_IMAGE_NAME/.env -d -p $PORT:$PORT --name $DOCKER_CONTAINER_NAME  $DOCKER_USERNAME/$DOCKER_IMAGE_NAME
              EOF

  workflows:
    version: 2
    build-and-deploy:
      jobs:
        - build
        - push:
            requires:
              - build
        - deploy:
            requires:
              - push